{-
https://wiki.haskell.org/Library/PNG

A small library for creating monochrome PNG files.
This file is placed into the public domain.
Dependencies: Zlib.
-}

module ModulePng where
import Data.Array
import Data.Bits
import Data.List
import Data.Word
import Codec.Compression.Zlib as Z
import Data.ByteString.Lazy as B

saveMonoPng :: FilePath -> [[Bool]] -> IO ()
saveMonoPng path bitmap = B.writeFile path $ pngMono bitmap

saveGrayPng :: FilePath -> [[Int]] -> IO ()
saveGrayPng path bitmap = B.writeFile path $ pngGray bitmap


private be8 :: Word8 -> B.ByteString
private be8 x = B.singleton x

private be32 :: Word32 -> B.ByteString
private be32 x = B.pack [fromIntegral (x `shiftR` sh) | sh <- [24,16,8,0]]

private pack :: String -> B.ByteString
private pack xs = B.pack $ map (fromIntegral.fromEnum) xs

private unpack :: B.ByteString -> String
private unpack xs = map (toEnum.fromIntegral) (B.unpack xs)

hdr, iHDR, iDAT, iEND :: B.ByteString
hdr = pack "\137\80\78\71\13\10\26\10"
iHDR = pack "IHDR"
iDAT = pack "IDAT"
iEND = pack "IEND"

private chunk :: B.ByteString -> B.ByteString -> [B.ByteString]
private chunk tag xs = [be32 (fromIntegral $ B.length xs), dat, be32 (crc dat)]
    where dat = B.append tag xs

-- | Return a monochrome PNG file from a two dimensional bitmap
-- stored in a list of lines represented as a list of booleans.
pngMono :: [[Bool]] -> B.ByteString
pngMono dat = B.concat $ hdr : concat [ihdr, imgdat, iend]
    where height = fromIntegral $ length dat
          width = fromIntegral $ length (head dat)
          ihdr = chunk iHDR (B.concat [
                be32 width, be32 height, be8 1, be8 0, be8 0, be8 0, be8 0])
          imgdat = chunk iDAT (Z.compress imgbits)
          imgbits = B.concat $ map scanline dat
          iend = chunk iEND B.empty

private scanline :: [Bool] -> B.ByteString
private scanline dat = B.cons 0 bitpack dat

private bitpack' :: [Bool] -> Word8 -> Word8 -> B.ByteString
private bitpack' [] n b = if b /= 0x80 then B.singleton n else B.empty
private bitpack' (x:xs) n b =
    if b == 1
        then B.cons v bitpack' xs 0 0x80
        else bitpack' xs v (b `shiftR` 1)
    where v = if x then n else n .|. b

private bitpack :: [Bool] -> B.ByteString
private bitpack xs = bitpack' xs 0 0x80

private crc :: B.ByteString -> Word32
private crc xs = updateCrc 0xffffffff xs `xor` 0xffffffff

private updateCrc :: Word32 -> B.ByteString -> Word32
private updateCrc = B.foldl' crcStep

private crcStep :: Word32 -> Word8 -> Word32
private crcStep crc ch = (crcTab ! n) `xor` (crc `shiftR` 8)
    where n = fromIntegral (crc `xor` fromIntegral ch)

private crcTab :: Array Word8 Word32
private crcTab = listArray (0,255) $ flip map [0..255] (\n ->
    foldl' (\c k -> if c .&. 1 == 1
                      then 0xedb88320 `xor` (c `shiftR` 1)
                      else c `shiftR` 1) n [0..7])


-- | Return a grayscale PNG file from a two dimensional bitmap stored in a list
-- of lines represented as a list of 0-255 integer values.
pngGray :: [[Int]] -> B.ByteString
pngGray dat = B.concat $ hdr : concat [ihdr, imgdat, iend]
     where height = fromIntegral $ length dat
           width = fromIntegral $ length (head dat)
           ihdr = chunk iHDR $ B.concat
                     [ be32 width
                     , be32 height
                     , be8 8   -- bits per pixel
                     , be8 0   -- color type
                     , be8 0   -- compression method
                     , be8 0   -- filter method
                     , be8 0 ] -- interlace method
           imgdat = chunk iDAT (Z.compress imgbits)
           imgbits = B.concat $ map scanlineGray dat
           iend = chunk iEND B.empty

private scanlineGray :: [Int] -> B.ByteString
private scanlineGray dat = B.pack (0 : map fromIntegral dat)
